<?php

namespace Kuakao\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TMenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TMenuRepository extends EntityRepository
{
    public function getAll($where = [], $order=['listorder'=>'asc'])
    {
        return $this->findBy($where, $order);
    }

    /**
     * 生成 <option></option> 选项
     * @param $list
     * @param null $data
     * @return string
     */
    public static function fillOption($list, $data = null)
    {
        $html = "";
        if (is_array($list)) {
            foreach ($list as $key => $val)
            {
                if (is_object($val))
                {
                    $id     = $val->getId();
                    $name   = $val->getName();
                    if(empty($data)) {
                        $selected = "";
                    } else {
                        $selected = "selected";
                    }
                    $html = $html . "<option value='{$id}' $selected>{$name}</option>";
                }
                else
                {
                    if ($key == $data) {
                        $selected = "selected";
                    } else {
                        $selected = "";
                    }
                    $html = $html . "<option value='{$key}' $selected>{$val}</option>";
                }
            }
        }
        return $html;
    }

    /**
     * 把数组转换成树形
     * @param $list 操作数组
     * @param int $root 跟层级
     * @return array
     */
    public static function list_to_tree($list, $root = 0)
    {
        $tree = array();
        if(is_array($list))
        {
            $refer = array();
            foreach($list as $key=>$val) {
                $refer[$val->getId()] = &$list[$key];
            }
            foreach($list as $key=>$val)
            {
                $parentid = 0;
                if( !empty($val->getParentid()) ) {
                    $parentid =  $val->getParentid();
                }
                if( $root == $parentid ) {
                    $tree[] = &$list[$key];
                } else if( isset($refer[$parentid]) ) {
                    $parent = &$refer[$parentid];
                    $parent->_child[] = &$list[$key];
                }
            }
        }
        return $tree;
    }

    /**
     * 生成层级菜单
     * @param $tree
     * @param int $level
     * @return string
     */
    public static function popup_tree_menu($tree, $level = 0)
    {
        $level++;
        $html = "";
        if (is_array($tree))
        {
            $html = "<ul class=\"tree_menu\">\r\n";
            foreach ($tree as $val)
            {
                if ($val->getName()) {
                    $title = $val->getName();
                    $id = $val->getId();
                    if (empty($val->getId())) {
                        $id = $val->getName();
                    }
                    if (isset($val->_child)) {
                        $html = $html . "<li>\r\n<a node=\"$id\" ><i class=\"fa fa-angle-right level$level\"></i><span>$title</span></a>\r\n";
                        $html = $html . self::popup_tree_menu($val->_child, $level);
                        $html = $html . "</li>\r\n";
                    } else {
                        $html = $html . "<li>\r\n<a node=\"$id\" ><i class=\"fa fa-angle-right level$level\"></i><span>$title</span></a>\r\n</li>\r\n";
                    }
                }
            }
            $html = $html . "</ul>\r\n";
        }
        return $html;
    }

    /**
     * 生成左侧菜单
     * @param $tree
     * @param array $badge_count
     * @param int $level
     * @return string
     */
    public static function tree_nav($tree, $badge_count=array(), $level = 0)
    {
        $level++;
        $html = "";
        if (is_array($tree))
        {
            if ($level > 1) {
                $html = "<ul class='submenu collapse'>\r\n";
            } else {
                $html = "<ul id='side-menu' class='nav nav-list'>\r\n";
            }
            foreach ($tree as $val)
            {
                if ($val->getName())
                {
                    $title = $val->getName();
                    $url = $val->getUrl();
                    if (empty($val->getId())) {
                        $id = $val->getName();
                    } else {
                        $id = $val->getId();
                    }
                    $icon = "fa fa-angle-right";
                    if (isset($val->_child))
                    {
                        $url = '#';
                        $html .= "<li>\r\n";
                        $html .= "<a node=\"$id\" href=\"" . "$url\">";
                        $html .= "<i class=\"$icon\"></i>";
                        $html .= "<span class=\"menu-text\">$title</span>";
                        $html .= "<span class=\"fa arrow\"></span>";
                        if (!empty($badge_count[$val->getId()])) {
                            $html .= "<span class=\"pull-right label label-primary\">" . $badge_count[$val->getId()] . "</span>";
                        }
                        $html .= "</a>\r\n";
                        $html .= self::tree_nav($val->_child, $badge_count, $level);
                        $html = $html . "</li>\r\n";
                    }
                    else
                    {
                        $html .= "<li>\r\n";
                        $html .= "<a  node=\"$id\" href=\"" . "$url\">\r\n";
                        $html .= "<i class=\"$icon\"></i>";
                        $html .= "<span class=\"menu-text\">$title</span>";
                        if (!empty($badge_count[$val->getId()])) {
                            $html .= "<span class=\"pull-right label label-primary\">" . $badge_count[$val->getId()] . "</span>";
                        }
                        $html .= "</a>\r\n</li>\r\n";
                    }
                }
            }
            $html = $html . "</ul>\r\n";
        }
        return $html;
    }

    /**
     * 递归菜单,算出层级
     * @param $category
     * @param int $id
     * @param int $lev
     * @return array
     */
    public static function lev_menu($category, $id=0, $lev=0)
    {
        static $list = array();
        foreach($category as $val) {
            if($val->getParentid() == $id) {
                $val->lev = $lev;
                $list[] = $val;
                self::lev_menu($category, $val->getId(), $lev+1);
            }
        }
        return $list;
    }
}
